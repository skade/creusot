module BranchBorrow3
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude

  scope Type
  type myint  = 
    | MyInt(usize)
    
  predicate drop_myint (self : myint) = 
    let MyInt(a) = self in drop_uint a
  end
  let rec cfg main () : ()
    =
  var _0 : ();
  var a_1 : (Type.myint, Type.myint);
  var _2 : Type.myint;
  var _3 : Type.myint;
  var b_4 : borrowed (Type.myint, Type.myint);
  var c_5 : borrowed (Type.myint);
  var d_6 : borrowed (Type.myint);
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  {
    goto BB0
  }
  BB0 {
    _2 <- Type.MyInt((10 : usize));
    _3 <- Type.MyInt((5 : usize));
    a_1 <- (_2, _3);
    b_4 <- borrow_mut a_1;
    a_1 <-  ^ b_4;
    assume { (fun tup -> let (a, b) = tup in Type.drop_myint a && Type.drop_myint b) a_1 };
    c_5 <- borrow_mut (let (_, a) =  * b_4 in a);
    b_4 <- { b_4 with current = (let (a, b) =  * b_4 in (a,  ^ c_5)) };
    d_6 <- borrow_mut (let (a, _) =  * b_4 in a);
    b_4 <- { b_4 with current = (let (a, b) =  * b_4 in ( ^ d_6, b)) };
    assume { drop_mut_ref b_4 };
    _8 <- (let Type.MyInt(a) =  * c_5 in a);
    assume { drop_mut_ref c_5 };
    _9 <- (let Type.MyInt(a) =  * d_6 in a);
    assume { drop_mut_ref d_6 };
    _7 <- _8 <> _9;
    assume { drop_bool _7 };
    _0 <- ();
    return _0
  }
  
end
