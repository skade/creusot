module DropPair
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude

  scope Type
  end
  let rec cfg main () : ()
    =
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
  let rec cfg dropPair (o_x_1 : (borrowed uint32, borrowed uint32)) : ()
    =
  var _0 : ();
  var x_1 : (borrowed uint32, borrowed uint32);
  {
    x_1 <- o_x_1;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { (fun tup -> let (a, b) = tup in drop_mut_ref a && drop_mut_ref b) x_1 };
    return _0
  }
  
  let rec cfg dropPair2 (o_x_1 : (borrowed uint32, borrowed uint32)) : ()
    =
  var _0 : ();
  var x_1 : (borrowed uint32, borrowed uint32);
  var _2 : (borrowed uint32, borrowed uint32);
  {
    x_1 <- o_x_1;
    goto BB0
  }
  BB0 {
    _2 <- x_1;
    assume { (fun tup -> let (a, b) = tup in drop_mut_ref a && drop_mut_ref b) _2 };
    _0 <- ();
    return _0
  }
  
  let rec cfg drop (o_x_1 : borrowed uint32) (o_y_2 : borrowed uint32) : ()
    =
  var _0 : ();
  var x_1 : borrowed uint32;
  var y_2 : borrowed uint32;
  var _3 : borrowed uint32;
  {
    x_1 <- o_x_1;
    y_2 <- o_y_2;
    goto BB0
  }
  BB0 {
    assume { drop_mut_ref x_1 };
    _3 <- borrow_mut ( * y_2);
    y_2 <- { y_2 with current = ( ^ _3) };
    assume { drop_mut_ref y_2 };
    x_1 <- _3;
    assume { drop_mut_ref _3 };
    _0 <- ();
    return _0
  }
  
end
