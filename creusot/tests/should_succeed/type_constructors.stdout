module TypeConstructors
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude

  scope Type
  type b_x  = 
    | B_X_A
    | B_X_B
    | B_X_C
    
  predicate drop_b_x (self : b_x) = 
    match (self) with
      | B_X_A -> true
      | B_X_B -> true
      | B_X_C -> true
      end
  type a_y  = 
    | A_Y(b_x)
    
  predicate drop_a_y (self : a_y) = 
    let A_Y(a) = self in drop_b_x a
  end
  let rec cfg main () : ()
    =
  var _0 : ();
  var _1 : Type.b_x;
  var _2 : Type.a_y;
  var _3 : Type.b_x;
  {
    goto BB0
  }
  BB0 {
    _1 <- Type.B_X_A;
    assume { Type.drop_b_x _1 };
    _3 <- Type.B_X_B;
    _2 <- Type.A_Y(_3);
    assume { Type.drop_a_y _2 };
    _0 <- ();
    return _0
  }
  
end
