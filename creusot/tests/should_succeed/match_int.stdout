module MatchInt
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude

  scope Type
  end
  let rec cfg main () : ()
    =
  var _0 : ();
  var _1 : int32;
  var _2 : bool;
  var _3 : bool;
  var _4 : bool;
  var _5 : ();
  var _6 : bool;
  var _7 : ();
  var _8 : bool;
  var _9 : ();
  {
    goto BB0
  }
  BB0 {
    _1 <- (1 : int32);
    _2 <- (0 : int32) <= _1;
    switch (_2)
      | False -> goto BB3
      | True -> goto BB1
      | _ -> goto BB1
      end
  }
  BB1 {
    assume { drop_bool _2 };
    _3 <- _1 < (10 : int32);
    switch (_3)
      | False -> goto BB3
      | True -> goto BB2
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { drop_int _1 };
    assume { drop_bool _3 };
    goto BB7
  }
  BB3 {
    assume { drop_bool _2 };
    switch (_1 = 5)
      | True -> goto BB4
      | False -> switch (_1 = 6)
        | True -> goto BB5
        | False -> goto BB6
        end
      end
  }
  BB4 {
    assume { drop_int _1 };
    goto BB10
  }
  BB5 {
    assume { drop_int _1 };
    goto BB10
  }
  BB6 {
    assume { drop_int _1 };
    _8 <- not false;
    switch (_8)
      | False -> goto BB14
      | True -> goto BB13
      | _ -> goto BB13
      end
  }
  BB7 {
    _4 <- not true;
    switch (_4)
      | False -> goto BB9
      | True -> goto BB8
      | _ -> goto BB8
      end
  }
  BB8 {
    assume { drop_bool _4 };
    absurd
  }
  BB9 {
    assume { drop_bool _4 };
    _0 <- ();
    goto BB15
  }
  BB10 {
    _6 <- not false;
    switch (_6)
      | False -> goto BB12
      | True -> goto BB11
      | _ -> goto BB11
      end
  }
  BB11 {
    assume { drop_bool _6 };
    absurd
  }
  BB12 {
    assume { drop_bool _6 };
    _0 <- ();
    goto BB15
  }
  BB13 {
    assume { drop_bool _8 };
    absurd
  }
  BB14 {
    assume { drop_bool _8 };
    _0 <- ();
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
