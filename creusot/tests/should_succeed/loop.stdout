module Loop
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude

  scope Type
  end
  let rec cfg main () : ()
    =
  var _0 : ();
  var a_1 : int32;
  var b_2 : borrowed int32;
  var _3 : ();
  var _4 : ();
  var _5 : bool;
  var _6 : ();
  var _7 : bool;
  var _8 : int32;
  {
    goto BB0
  }
  BB0 {
    a_1 <- (10 : int32);
    b_2 <- borrow_mut a_1;
    a_1 <-  ^ b_2;
    b_2 <- { b_2 with current = (5 : int32) };
    assume { drop_mut_ref b_2 };
    goto BB1
  }
  BB1 {
    assume { (fun tup -> let () = tup in true) _4 };
    goto BB2
  }
  BB2 {
    _5 <- true;
    switch (_5)
      | False -> goto BB4
      | True -> goto BB3
      | _ -> goto BB3
      end
  }
  BB3 {
    assume { drop_bool _5 };
    _3 <- ();
    assume { (fun tup -> let () = tup in true) _3 };
    _8 <- a_1;
    assume { drop_int a_1 };
    _7 <- _8 = (15 : int32);
    assume { drop_bool _7 };
    _0 <- ();
    return _0
  }
  BB4 {
    assume { drop_bool _5 };
    _4 <- ();
    goto BB1
  }
  
end
