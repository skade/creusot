module Mc91
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude

  scope Type
  end
  let rec cfg mc91 (o_x_1 : uint32) : uint32
    ensures { o_x_1 <= (100 : uint32) -> result = (91 : uint32) && o_x_1 > (100 : uint32) -> result = o_x_1 - (10 : uint32) }
    =
  var _0 : uint32;
  var x_1 : uint32;
  var _2 : bool;
  var _3 : uint32;
  var _4 : uint32;
  var _5 : uint32;
  var _6 : uint32;
  var _7 : uint32;
  {
    x_1 <- o_x_1;
    goto BB0
  }
  BB0 {
    _3 <- x_1;
    _2 <- _3 > (100 : uint32);
    switch (_2)
      | False -> goto BB2
      | True -> goto BB1
      | _ -> goto BB1
      end
  }
  BB1 {
    assume { drop_bool _2 };
    _4 <- x_1;
    assume { drop_uint x_1 };
    _0 <- _4 - (10 : uint32);
    goto BB5
  }
  BB2 {
    assume { drop_bool _2 };
    _7 <- x_1;
    assume { drop_uint x_1 };
    _6 <- _7 + (11 : uint32);
    _5 <- mc91 _6;
    goto BB3
  }
  BB3 {
    _0 <- mc91 _5;
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
  let rec cfg main () : ()
    =
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
