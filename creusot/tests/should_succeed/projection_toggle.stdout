module ProjectionToggle
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude

  scope Type
  end
  let rec cfg projToggle (o_toggle_1 : bool) (o_a_2 : borrowed 't) (o_b_3 : borrowed 't) : borrowed 't
    ensures { o_toggle_1 = false -> result = o_b_3 &&  ^ o_a_2 =  * o_a_2 }
    ensures { o_toggle_1 = true -> result = o_a_2 &&  ^ o_b_3 =  * o_b_3 }
    =
  var _0 : borrowed 't;
  var toggle_1 : bool;
  var a_2 : borrowed 't;
  var b_3 : borrowed 't;
  var _4 : borrowed 't;
  var _5 : borrowed 't;
  var _6 : bool;
  var _7 : borrowed 't;
  var _8 : borrowed 't;
  {
    toggle_1 <- o_toggle_1;
    a_2 <- o_a_2;
    b_3 <- o_b_3;
    goto BB0
  }
  BB0 {
    _6 <- toggle_1;
    assume { drop_bool toggle_1 };
    switch (_6)
      | False -> goto BB2
      | True -> goto BB1
      | _ -> goto BB1
      end
  }
  BB1 {
    assume { drop_mut_ref b_3 };
    assume { drop_bool _6 };
    _7 <- borrow_mut ( * a_2);
    a_2 <- { a_2 with current = ( ^ _7) };
    assume { drop_mut_ref a_2 };
    _5 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _5) };
    assume { drop_mut_ref _7 };
    goto BB3
  }
  BB2 {
    assume { drop_mut_ref a_2 };
    assume { drop_bool _6 };
    _8 <- borrow_mut ( * b_3);
    b_3 <- { b_3 with current = ( ^ _8) };
    assume { drop_mut_ref b_3 };
    _5 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _5) };
    assume { drop_mut_ref _8 };
    goto BB3
  }
  BB3 {
    _4 <- borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ _4) };
    assume { drop_mut_ref _5 };
    _0 <- borrow_mut ( * _4);
    _4 <- { _4 with current = ( ^ _0) };
    assume { drop_mut_ref _4 };
    return _0
  }
  
  let rec cfg main () : ()
    =
  var _0 : ();
  var a_1 : int32;
  var b_2 : int32;
  var x_3 : borrowed int32;
  var _4 : borrowed int32;
  var _5 : borrowed int32;
  var _6 : borrowed int32;
  var _7 : borrowed int32;
  var _8 : ();
  var _9 : bool;
  var _10 : bool;
  var _11 : int32;
  var _12 : ();
  {
    goto BB0
  }
  BB0 {
    a_1 <- (10 : int32);
    b_2 <- (5 : int32);
    _5 <- borrow_mut a_1;
    a_1 <-  ^ _5;
    _4 <- borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ _4) };
    assume { drop_mut_ref _5 };
    _7 <- borrow_mut b_2;
    b_2 <-  ^ _7;
    assume { drop_int b_2 };
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    assume { drop_mut_ref _7 };
    x_3 <- projToggle true _4 _6;
    goto BB1
  }
  BB1 {
    x_3 <- { x_3 with current = ( * x_3 + (5 : int32)) };
    assume { drop_mut_ref x_3 };
    _11 <- a_1;
    assume { drop_int a_1 };
    _10 <- _11 = (15 : int32);
    _9 <- not _10;
    switch (_9)
      | False -> goto BB3
      | True -> goto BB2
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { drop_bool _9 };
    absurd
  }
  BB3 {
    assume { drop_bool _9 };
    _8 <- ();
    assume { (fun tup -> let () = tup in true) _8 };
    _0 <- ();
    return _0
  }
  
end
