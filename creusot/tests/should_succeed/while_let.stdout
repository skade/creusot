module WhileLet
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude

  scope Type
  type option 't = 
    | Option_Some('t)
    | Option_None
    
  predicate drop_option (drop_t : 't -> bool) (self : option 't) = 
    match (self) with
      | Option_Some(a) -> drop_t a
      | Option_None -> true
      end
  end
  let rec cfg main () : ()
    =
  var _0 : ();
  var a_1 : Type.option int32;
  var b_2 : borrowed (Type.option int32);
  var _4 : ();
  var _5 : isize;
  var _6 : Type.option int32;
  var _7 : ();
  {
    goto BB0
  }
  BB0 {
    a_1 <- Type.Option_Some((10 : int32));
    b_2 <- borrow_mut a_1;
    a_1 <-  ^ b_2;
    assume { Type.drop_option drop_int a_1 };
    goto BB1
  }
  BB1 {
    invariant dummy { true };
    assume { (fun tup -> let () = tup in true) _4 };
    goto BB2
  }
  BB2 {
    switch ( * b_2)
      | Type.Option_Some(_) -> goto BB3
      | _ -> goto BB4
      end
  }
  BB3 {
    assume { drop_int _5 };
    goto BB5
  }
  BB4 {
    assume { drop_mut_ref b_2 };
    assume { drop_int _5 };
    _0 <- ();
    return _0
  }
  BB5 {
    _6 <- Type.Option_None;
    b_2 <- { b_2 with current = _6 };
    assume { Type.drop_option drop_int _6 };
    _4 <- ();
    goto BB1
  }
  
end
