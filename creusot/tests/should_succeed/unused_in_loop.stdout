module UnusedInLoop
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude

  scope Type
  end
  let rec cfg unusedInLoop (o_b_1 : bool) : uint32
    ensures { result = (10 : uint32) }
    =
  var _0 : uint32;
  var b_1 : bool;
  var x_2 : uint32;
  var _3 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : ();
  {
    b_1 <- o_b_1;
    goto BB0
  }
  BB0 {
    x_2 <- (10 : uint32);
    goto BB1
  }
  BB1 {
    invariant x { true };
    assume { (fun tup -> let () = tup in true) _5 };
    goto BB2
  }
  BB2 {
    _6 <- b_1;
    switch (_6)
      | False -> goto BB4
      | True -> goto BB3
      | _ -> goto BB3
      end
  }
  BB3 {
    assume { drop_bool b_1 };
    assume { drop_bool _6 };
    _3 <- ();
    assume { (fun tup -> let () = tup in true) _3 };
    _0 <- x_2;
    assume { drop_uint x_2 };
    return _0
  }
  BB4 {
    assume { drop_bool _6 };
    _5 <- ();
    goto BB1
  }
  
  let rec cfg main () : ()
    =
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
