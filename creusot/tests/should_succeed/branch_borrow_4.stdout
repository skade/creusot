module BranchBorrow4
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude

  scope Type
  end
  let rec cfg main () : ()
    =
  var _0 : ();
  var a_1 : int32;
  var b_2 : int32;
  var x_3 : borrowed int32;
  var y_4 : borrowed int32;
  var w_5 : borrowed int32;
  var _6 : ();
  var _7 : bool;
  var _8 : borrowed int32;
  var _9 : borrowed int32;
  var _10 : int32;
  {
    goto BB0
  }
  BB0 {
    a_1 <- (10 : int32);
    b_2 <- (10 : int32);
    x_3 <- borrow_mut a_1;
    a_1 <-  ^ x_3;
    assume { drop_int a_1 };
    y_4 <- borrow_mut b_2;
    b_2 <-  ^ y_4;
    assume { drop_int b_2 };
    _7 <- true;
    switch (_7)
      | False -> goto BB2
      | True -> goto BB1
      | _ -> goto BB1
      end
  }
  BB1 {
    assume { drop_mut_ref y_4 };
    assume { drop_bool _7 };
    x_3 <- { x_3 with current = (5 : int32) };
    _8 <- x_3;
    w_5 <- _8;
    _6 <- ();
    assume { (fun tup -> let () = tup in true) _6 };
    goto BB3
  }
  BB2 {
    assume { drop_mut_ref x_3 };
    assume { drop_bool _7 };
    y_4 <- { y_4 with current = (6 : int32) };
    _9 <- borrow_mut ( * y_4);
    y_4 <- { y_4 with current = ( ^ _9) };
    assume { drop_mut_ref y_4 };
    w_5 <- _9;
    _6 <- ();
    assume { (fun tup -> let () = tup in true) _6 };
    goto BB3
  }
  BB3 {
    assume { drop_mut_ref x_3 };
    _10 <-  * w_5;
    assume { drop_mut_ref w_5 };
    assume { drop_int _10 };
    _0 <- ();
    return _0
  }
  
end
