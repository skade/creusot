module Unnest
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude

  scope Type
  type myint  = 
    | MyInt(usize)
    
  predicate drop_myint (self : myint) = 
    let MyInt(a) = self in drop_uint a
  end
  let rec cfg main () : ()
    =
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
  let rec cfg unnest (o_x_1 : borrowed (borrowed uint32)) : borrowed uint32
    ensures {  ^  * o_x_1 =  ^  ^ o_x_1 }
    ensures {  * result =  *  * o_x_1 }
    ensures {  ^ result =  *  ^ o_x_1 }
    =
  var _0 : borrowed uint32;
  var x_1 : borrowed (borrowed uint32);
  var _2 : borrowed uint32;
  {
    x_1 <- o_x_1;
    goto BB0
  }
  BB0 {
    _2 <- borrow_mut ( *  * x_1);
    x_1 <- { x_1 with current = { ( * x_1) with current = ( ^ _2) } };
    assume { drop_mut_ref x_1 };
    _0 <- borrow_mut ( * _2);
    _2 <- { _2 with current = ( ^ _0) };
    assume { drop_mut_ref _2 };
    return _0
  }
  
end
