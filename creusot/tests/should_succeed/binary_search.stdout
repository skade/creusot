module BinarySearch
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude

  scope Type
  type core_result_result 't 'e = 
    | Core_Result_Result_Ok('t)
    | Core_Result_Result_Err('e)
    
  predicate drop_core_result_result (drop_t : 't -> bool) (drop_e : 'e -> bool) (self : core_result_result 't 'e) = 
    match (self) with
      | Core_Result_Result_Ok(a) -> drop_t a
      | Core_Result_Result_Err(a) -> drop_e a
      end
  type list 't = 
    | List_Cons('t, list 't)
    | List_Nil
    
  predicate drop_list (drop_t : 't -> bool) (self : list 't) = 
    match (self) with
      | List_Cons(a, b) -> drop_t a && drop_fix b
      | List_Nil -> true
      end
  end
  let rec function lenLogic (l : Type.list 'a) : int = 
    ensures { result >= 0 }
    
      match (l) with
        | Type.List_Cons(_, ls) -> 1 + lenLogic ls
        | Type.List_Nil -> 0
        end
  let rec function get (l : Type.list 'a) (ix : int) : 'a = 
    requires {ix >= 0}
    requires {ix < lenLogic l}
    variant {lenLogic l}
    
      match (l) with
        | Type.List_Cons(t, ls) -> match (ix = 0) with
          | True -> t
          | False -> get ls (ix - 1)
          end
        | Type.List_Nil -> absurd
        end
  let rec cfg impl0_index (o_self_1 : Type.list 't) (o_ix_2 : usize) : 't
    requires {o_ix_2 < lenLogic o_self_1}
    ensures { result = get o_self_1 o_ix_2 }
    =
  var _0 : 't;
  var self_1 : Type.list 't;
  var ix_2 : usize;
  var orig_ix_3 : usize;
  var l_4 : Type.list 't;
  var _5 : ();
  var _8 : ();
  var _9 : isize;
  var t_10 : 't;
  var ls_11 : Type.list 't;
  var _12 : bool;
  var _13 : usize;
  var _14 : Type.list 't;
  var _15 : Type.list 't;
  var _16 : ();
  var _17 : ();
  var _18 : ();
  {
    self_1 <- o_self_1;
    ix_2 <- o_ix_2;
    goto BB0
  }
  BB0 {
    orig_ix_3 <- ix_2;
    assume { drop_uint orig_ix_3 };
    l_4 <- self_1;
    assume { drop_ref self_1 };
    goto BB1
  }
  BB1 {
    invariant ix_valid { ix_2 < lenLogic l_4 };
    invariant res_get { get self_1 orig_ix_3 = get l_4 ix_2 };
    assume { (fun tup -> let () = tup in true) _8 };
    goto BB2
  }
  BB2 {
    switch (l_4)
      | Type.List_Cons(_, _) -> goto BB3
      | _ -> goto BB4
      end
  }
  BB3 {
    assume { drop_int _9 };
    goto BB5
  }
  BB4 {
    assume { drop_uint ix_2 };
    assume { drop_ref l_4 };
    assume { drop_int _9 };
    _5 <- ();
    assume { (fun tup -> let () = tup in true) _5 };
    absurd
  }
  BB5 {
    t_10 <- (let Type.List_Cons(a, _) = l_4 in a);
    ls_11 <- (let Type.List_Cons(_, a) = l_4 in a);
    assume { drop_ref l_4 };
    _13 <- ix_2;
    _12 <- _13 > (0 : usize);
    switch (_12)
      | False -> goto BB7
      | True -> goto BB6
      | _ -> goto BB6
      end
  }
  BB6 {
    assume { drop_ref t_10 };
    assume { drop_bool _12 };
    _15 <- ls_11;
    assume { drop_ref ls_11 };
    _14 <- _15;
    assume { drop_ref _15 };
    l_4 <- _14;
    ix_2 <- ix_2 - (1 : usize);
    _8 <- ();
    goto BB1
  }
  BB7 {
    assume { drop_uint ix_2 };
    assume { drop_ref ls_11 };
    assume { drop_bool _12 };
    _0 <- t_10;
    assume { drop_ref t_10 };
    return _0
  }
  
  let rec cfg impl0_len (o_self_1 : Type.list 't) : usize
    requires {lenLogic o_self_1 <= 1000000}
    ensures { result = lenLogic o_self_1 }
    ensures { result >= (0 : usize) }
    =
  var _0 : usize;
  var self_1 : Type.list 't;
  var len_2 : usize;
  var l_3 : Type.list 't;
  var _4 : ();
  var _6 : ();
  var _7 : isize;
  var ls_8 : Type.list 't;
  var _9 : Type.list 't;
  var _10 : ();
  {
    self_1 <- o_self_1;
    goto BB0
  }
  BB0 {
    len_2 <- (0 : usize);
    l_3 <- self_1;
    assume { drop_ref self_1 };
    goto BB1
  }
  BB1 {
    invariant len_valid { len_2 + lenLogic l_3 = lenLogic self_1 };
    assume { (fun tup -> let () = tup in true) _6 };
    goto BB2
  }
  BB2 {
    switch (l_3)
      | Type.List_Cons(_, _) -> goto BB3
      | _ -> goto BB4
      end
  }
  BB3 {
    assume { drop_int _7 };
    goto BB5
  }
  BB4 {
    assume { drop_ref l_3 };
    assume { drop_int _7 };
    _4 <- ();
    assume { (fun tup -> let () = tup in true) _4 };
    _0 <- len_2;
    assume { drop_uint len_2 };
    return _0
  }
  BB5 {
    ls_8 <- (let Type.List_Cons(_, a) = l_3 in a);
    assume { drop_ref l_3 };
    len_2 <- len_2 + (1 : usize);
    _9 <- ls_8;
    assume { drop_ref ls_8 };
    l_3 <- _9;
    _6 <- ();
    goto BB1
  }
  
  let rec cfg binarySearch (o_arr_1 : Type.list uint32) (o_elem_2 : uint32) : Type.core_result_result usize usize
    requires {lenLogic o_arr_1 <= 1000000}
    requires {forall k1 : int, k2 : int . get o_arr_1 k1 <= get o_arr_1 k2}
    ensures { forall x : usize . result = Type.Core_Result_Result_Err(x) -> (forall i : int . x < i && i < lenLogic o_arr_1 -> o_elem_2 < get o_arr_1 i) }
    ensures { forall x : usize . result = Type.Core_Result_Result_Ok(x) -> get o_arr_1 x = o_elem_2 }
    ensures { forall x : usize . result = Type.Core_Result_Result_Err(x) -> (forall i : int . 0 <= i && i < x -> get o_arr_1 i < o_elem_2) }
    =
  var _0 : Type.core_result_result usize usize;
  var arr_1 : Type.list uint32;
  var elem_2 : uint32;
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : Type.list uint32;
  var _7 : ();
  var size_8 : usize;
  var _9 : Type.list uint32;
  var base_10 : usize;
  var _11 : ();
  var _15 : ();
  var _16 : bool;
  var _17 : usize;
  var half_18 : usize;
  var _19 : usize;
  var _20 : bool;
  var mid_21 : usize;
  var _22 : usize;
  var _23 : usize;
  var _24 : usize;
  var _25 : bool;
  var _26 : uint32;
  var _27 : uint32;
  var _28 : Type.list uint32;
  var _29 : usize;
  var _30 : uint32;
  var _31 : usize;
  var _32 : ();
  var cmp_33 : uint32;
  var _34 : uint32;
  var _35 : Type.list uint32;
  var _36 : usize;
  var _37 : bool;
  var _38 : uint32;
  var _39 : uint32;
  var _40 : usize;
  var _41 : bool;
  var _42 : uint32;
  var _43 : uint32;
  var _44 : usize;
  var _45 : usize;
  var _46 : usize;
  {
    arr_1 <- o_arr_1;
    elem_2 <- o_elem_2;
    goto BB0
  }
  BB0 {
    _6 <- arr_1;
    _5 <- impl0_len _6;
    goto BB1
  }
  BB1 {
    _4 <- _5 = (0 : usize);
    switch (_4)
      | False -> goto BB3
      | True -> goto BB2
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { drop_ref arr_1 };
    assume { drop_uint elem_2 };
    assume { drop_bool _4 };
    _0 <- Type.Core_Result_Result_Err((0 : usize));
    goto BB22
  }
  BB3 {
    assume { drop_bool _4 };
    _3 <- ();
    assume { (fun tup -> let () = tup in true) _3 };
    _9 <- arr_1;
    size_8 <- impl0_len _9;
    goto BB4
  }
  BB4 {
    base_10 <- (0 : usize);
    goto BB5
  }
  BB5 {
    invariant size_valid { size_8 + base_10 <= lenLogic arr_1 };
    invariant in_range { forall i : int . 0 <= i && i < lenLogic arr_1 -> i < base_10 -> get arr_1 i <= elem_2 && base_10 + size_8 < i -> elem_2 <= get arr_1 i };
    invariant size_pos { size_8 > (0 : usize) };
    assume { (fun tup -> let () = tup in true) _15 };
    goto BB6
  }
  BB6 {
    _17 <- size_8;
    _16 <- _17 > (1 : usize);
    switch (_16)
      | False -> goto BB8
      | True -> goto BB7
      | _ -> goto BB7
      end
  }
  BB7 {
    assume { drop_bool _16 };
    goto BB9
  }
  BB8 {
    assume { drop_uint size_8 };
    assume { drop_bool _16 };
    _11 <- ();
    assume { (fun tup -> let () = tup in true) _11 };
    _35 <- arr_1;
    assume { drop_ref arr_1 };
    _36 <- base_10;
    _34 <- impl0_index _35 _36;
    goto BB15
  }
  BB9 {
    _19 <- size_8;
    _20 <- (2 : usize) = (0 : usize);
    assert { not _20 };
    goto BB10
  }
  BB10 {
    assume { drop_bool _20 };
    half_18 <- _19 / (2 : usize);
    _22 <- base_10;
    _23 <- half_18;
    mid_21 <- _22 + _23;
    _28 <- arr_1;
    _29 <- mid_21;
    _27 <- impl0_index _28 _29;
    goto BB11
  }
  BB11 {
    _26 <- _27;
    assume { drop_ref _27 };
    _30 <- elem_2;
    _25 <- _26 > _30;
    switch (_25)
      | False -> goto BB13
      | True -> goto BB12
      | _ -> goto BB12
      end
  }
  BB12 {
    assume { drop_uint mid_21 };
    assume { drop_bool _25 };
    _24 <- base_10;
    assume { drop_uint base_10 };
    goto BB14
  }
  BB13 {
    assume { drop_uint base_10 };
    assume { drop_bool _25 };
    _24 <- mid_21;
    assume { drop_uint mid_21 };
    goto BB14
  }
  BB14 {
    base_10 <- _24;
    _31 <- half_18;
    assume { drop_uint half_18 };
    size_8 <- size_8 - _31;
    assume { drop_uint _31 };
    _15 <- ();
    goto BB5
  }
  BB15 {
    cmp_33 <- _34;
    assume { drop_ref _34 };
    _38 <- cmp_33;
    _39 <- elem_2;
    _37 <- _38 = _39;
    switch (_37)
      | False -> goto BB17
      | True -> goto BB16
      | _ -> goto BB16
      end
  }
  BB16 {
    assume { drop_uint elem_2 };
    assume { drop_uint cmp_33 };
    assume { drop_bool _37 };
    _40 <- base_10;
    assume { drop_uint base_10 };
    _0 <- Type.Core_Result_Result_Ok(_40);
    goto BB21
  }
  BB17 {
    assume { drop_bool _37 };
    _42 <- cmp_33;
    assume { drop_uint cmp_33 };
    _43 <- elem_2;
    assume { drop_uint elem_2 };
    _41 <- _42 < _43;
    switch (_41)
      | False -> goto BB19
      | True -> goto BB18
      | _ -> goto BB18
      end
  }
  BB18 {
    assume { drop_bool _41 };
    _45 <- base_10;
    assume { drop_uint base_10 };
    _44 <- _45 + (1 : usize);
    _0 <- Type.Core_Result_Result_Err(_44);
    goto BB20
  }
  BB19 {
    assume { drop_bool _41 };
    _46 <- base_10;
    assume { drop_uint base_10 };
    _0 <- Type.Core_Result_Result_Err(_46);
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    assume { (fun tup -> let () = tup in true) _15 };
    return _0
  }
  
  let rec cfg main () : ()
    =
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
