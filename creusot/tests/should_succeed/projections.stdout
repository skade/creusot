module Projections
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude

  scope Type
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some('t)
    
  predicate drop_core_option_option (drop_t : 't -> bool) (self : core_option_option 't) = 
    match (self) with
      | Core_Option_Option_None -> true
      | Core_Option_Option_Some(a) -> drop_t a
      end
  type core_result_result 't 'e = 
    | Core_Result_Result_Ok('t)
    | Core_Result_Result_Err('e)
    
  predicate drop_core_result_result (drop_t : 't -> bool) (drop_e : 'e -> bool) (self : core_result_result 't 'e) = 
    match (self) with
      | Core_Result_Result_Ok(a) -> drop_t a
      | Core_Result_Result_Err(a) -> drop_e a
      end
  end
  let rec cfg copyOutOfRef (o_x_1 : uint32) : uint32
    =
  var _0 : uint32;
  var x_1 : uint32;
  {
    x_1 <- o_x_1;
    goto BB0
  }
  BB0 {
    _0 <- x_1;
    assume { drop_ref x_1 };
    return _0
  }
  
  let rec cfg copyOutOfSum (o_x_1 : Type.core_result_result (borrowed uint32) (borrowed uint32)) : uint32
    =
  var _0 : uint32;
  var x_1 : Type.core_result_result (borrowed uint32) (borrowed uint32);
  var _2 : isize;
  var x_3 : borrowed uint32;
  var y_4 : borrowed uint32;
  {
    x_1 <- o_x_1;
    goto BB0
  }
  BB0 {
    switch (x_1)
      | Type.Core_Result_Result_Ok(_) -> goto BB1
      | Type.Core_Result_Result_Err(_) -> goto BB2
      | _ -> goto BB3
      end
  }
  BB1 {
    assume { drop_int _2 };
    goto BB4
  }
  BB2 {
    assume { drop_int _2 };
    y_4 <- (let Type.Core_Result_Result_Err(a) = x_1 in a);
    assume { Type.drop_core_result_result drop_mut_ref drop_mut_ref x_1 };
    _0 <-  * y_4;
    assume { drop_mut_ref y_4 };
    goto BB5
  }
  BB3 {
    assume { Type.drop_core_result_result drop_mut_ref drop_mut_ref x_1 };
    assume { drop_int _2 };
    absurd
  }
  BB4 {
    x_3 <- (let Type.Core_Result_Result_Ok(a) = x_1 in a);
    assume { Type.drop_core_result_result drop_mut_ref drop_mut_ref x_1 };
    _0 <-  * x_3;
    assume { drop_mut_ref x_3 };
    goto BB5
  }
  BB5 {
    return _0
  }
  
  let rec cfg writeIntoSum (o_x_1 : borrowed (Type.core_option_option uint32)) : ()
    =
  var _0 : ();
  var x_1 : borrowed (Type.core_option_option uint32);
  var _2 : isize;
  var y_3 : borrowed uint32;
  {
    x_1 <- o_x_1;
    goto BB0
  }
  BB0 {
    switch ( * x_1)
      | Type.Core_Option_Option_None -> goto BB1
      | Type.Core_Option_Option_Some(_) -> goto BB2
      | _ -> goto BB3
      end
  }
  BB1 {
    assume { drop_mut_ref x_1 };
    assume { drop_int _2 };
    _0 <- ();
    goto BB5
  }
  BB2 {
    assume { drop_int _2 };
    goto BB4
  }
  BB3 {
    assume { drop_mut_ref x_1 };
    assume { drop_int _2 };
    absurd
  }
  BB4 {
    y_3 <- borrow_mut (let Type.Core_Option_Option_Some(a) =  * x_1 in a);
    x_1 <- { x_1 with current = (let Type.Core_Option_Option_Some(a) =  * x_1 in Type.Core_Option_Option_Some( ^ y_3)) };
    assume { drop_mut_ref x_1 };
    y_3 <- { y_3 with current = (10 : uint32) };
    assume { drop_mut_ref y_3 };
    _0 <- ();
    goto BB5
  }
  BB5 {
    return _0
  }
  
  let rec cfg main () : ()
    =
  var _0 : ();
  var _1 : bool;
  var _2 : Type.core_option_option int32;
  var _3 : isize;
  var x_4 : int32;
  var _5 : int32;
  {
    goto BB0
  }
  BB0 {
    _2 <- Type.Core_Option_Option_Some((10 : int32));
    switch (_2)
      | Type.Core_Option_Option_None -> goto BB1
      | Type.Core_Option_Option_Some(_) -> goto BB2
      | _ -> goto BB3
      end
  }
  BB1 {
    assume { Type.drop_core_option_option drop_int _2 };
    assume { drop_int _3 };
    _1 <- false;
    assume { drop_bool _1 };
    goto BB5
  }
  BB2 {
    assume { drop_int _3 };
    goto BB4
  }
  BB3 {
    assume { Type.drop_core_option_option drop_int _2 };
    assume { drop_int _3 };
    absurd
  }
  BB4 {
    x_4 <- (let Type.Core_Option_Option_Some(a) = _2 in a);
    assume { Type.drop_core_option_option drop_int _2 };
    _5 <- x_4;
    assume { drop_int x_4 };
    _1 <- _5 = (0 : int32);
    assume { drop_bool _1 };
    goto BB5
  }
  BB5 {
    _0 <- ();
    return _0
  }
  
end
