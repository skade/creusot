module Array
  use mach.int.Int
  use map.Map
  use mach.int.UInt64

  type array [@extraction:array] 'a = private {
    ghost elts : uint64 -> 'a;
                length : uint64
  }
  function ([]) (a: array 'a) (i: uint64) : 'a = a.elts i

  val ([]) (a: array 'a) (i: uint64) : 'a
    requires { [@expl:index in array bounds] 0 <= i < length a }
    ensures  { result = a[i] }

  val set (a : array 'a) (i : uint64) (v : 'a) : array 'a 
    ensures { result.length = a.length }
    ensures { result.elts = Map.set a.elts i v }
end

module Prelude
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double

  use export Array

  type usize = uint64
  type isize = int64

  type borrowed 'a = { current : 'a ; final : 'a; }
  let function ( *_ ) x = x.current
  let function ( ^_ ) x = x.final
  val borrow_mut (a : 'a) : borrowed 'a
  ensures { *result = a }

  predicate drop_fix (_ : 'a) = true
  predicate drop_uint (_ : 'a) = true
  predicate drop_int (_ : 'a) = true
  predicate drop_float (_ : 'a) = true
  predicate drop_bool (_ : 'a) = true
  predicate drop_mut_ref (b : borrowed 'a) = ^ b = * b
  predicate drop_ref (_ : 'a) = true
end
